5.spring의 MVC개요 및 작성법

** DI,Annotation =>정리(기초)**

7,8장->Spring MVC(모델 2을 기반)

 모델1->모델2->스프링
  초급   중급  고급(DI,Annotation)
====================================
=>자유 게시판->회원관리->스프링타일즈->파일업로드 게시판
========================================================
***p262 web.xml
***p264~265 컨트롤러 클래스=>액션클래스
***p266 스프링 MVC환경설정파일
***p268 흐름도
***p269 spring MVC 주요구성요소 6가지
============================================
모델2의 흐름도 vs 스프링의 흐름도

 SpringMVC->Dynamic Web Project


모델1,    모델2의 차이점=>요청에 따라서  처리하는 방식이 다름
web.xml 환경설정(X)->jsp
                   <-

모델2-->요청--->컨트롤러 처리->web.xml에 컨트롤러 등록
(=스프링)       DispatcherServlet(스프링 프레임워크)
                  메이븐X->lib에 저장

0.lib에 스프링 라이브러리를 등록->메이븐으로 변경
1.web.xml에 컨트롤러를 등록

 SpringMVC
     |
      -WebContent
           |
            -WEB-INF
                |
                 -lib->
                       commons-logging.jar->로그파일
                       commons-pool.jar
                       commons-dbcp.jar=>ConnectionPool
                       jstl.jar, standard.jar(jstl문법)
                       spring.jar->스프링의 기본(core)
                       spring-webmvc.jar->스프링웹

p271 /config/* =>/congif/로 요청이 들어오는 어떠한
                 요청명령어도 처리해준다.
        *.do

<servlet>
    <servlet-name>test</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  </servlet>
  
  <!-- 요청명령어를 등록(*.do~) -->
  <servlet-mapping>
     <servlet-name>test</servlet-name>
     <url-pattern>*.do</url-pattern>
  </servlet-mapping>
=========================================================
모델2

<init-param>
       <param-name>propertyConfig</param-name>
       <param-value>C:/webtest/4.jsp/sou/JspBoard2/WebContent/WEB-INF/commandPro.properties</param-value>
    </init-param>

 -->commandPro.properties에 요청명령어를 등록
 -->test-servlet.xml이 처리->/WEB-INF/에 저장
 
2. commandPro.properties->요청명령어를 등록

  HandlerMapping->요청명령어에 따른 요청컨트럴러의 이름
                  알려준다.

  /list.do=action.ListAction

  ModelAndView
  ====    ====>이동할 페이지(~.html,list.jsp
  list.jsp에게 전달할값

    이동할 페이지이름만 전달->list------>list.html
                                         list.jsp
                            /list.jsp
                            /WEB-INF/list.jsp
    =>ViewResolver
---------------index.html------------------------------------

<bean name="/index.do" 
      =================
   class="org.springframework.web.servlet.mvc.ParameterizableViewController">
     <property name="viewName" value="list"></property>
</bean>

<bean name="/good/index.do" 
      =====================
   class="org.springframework.web.servlet.mvc.ParameterizableViewController">
     <property name="viewName" value="list2"></property>
</bean>
===========================================================
test-servlet.xml

<!--3.요청에 따라서 처리해주는 컨트롤러 만들어서 처리(등록)  -->
<bean name="/index2.do"  class="lee.TestActionController" />

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

import action.CommandAction;
//public class ListAction implements CommandAction {
public class TestActionController implements Controller {

	//public String requestPro(HttpServletRequest request, HttpServletResponse response)
	@Override
	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		System.out.println("TestActionController의 handleRequest()호출됨!!");
		//어떤기능(글쓰기,글수정,,,,)=>결과 존재
		ModelAndView mav=new ModelAndView();
		//mav객체명.setViewName("이동할 파일명");
		mav.setViewName("list3");//경로X ,파일의 확장자X ->이동할 이름만 지정
		//request.setAttribute("greeting","스프링세상!");
		mav.addObject("greeting","스프링세상!");
		return mav; //return "/list.jsp";
	}
}
============================================================
*** SpringMVC2의 예제 목적 ***

1.한개이상의 환경설정파일을 이용하는 경우?
2.꼭 이름을 서블릿별칭명-servlet.xml 이렇게 작성?
   ->contextConfigLocation매개변수를 이용->이름을 변경해도
                                           되고 안해도 된다.
============================================================
 hello-servlet.xml->hello.do->HelloActionController->hello.jsp
 -->주
 world-servlet.xml->world.do->WorldActionController->world.jsp
 =-->부
=============================================================

1.web.xml=>환경설정을 변경

  /WEB-INF/main.xml,/WEB-INF/bbs.xml=>콤마
  /WEB-INF/main.xml;/WEB-INF/bbs.xml=>세미콜론
  /WEB-INF/main.xml /WEB-INF/bbs.xml=>공백
  /WEB-INF/main.xml =>줄바꿈
  /WEB-INF/bbs.xml

   classpath:파일명==>/WEB-INF/폴더외의 다른 경로에서 불러오는
                       경우->src폴더 기준
----------------------------------------------------------
<!-- 주 나중에 메모리에 올려서 다른 환경설정파일 불러오게 -->
<servlet>
    <servlet-name>hello</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
     <init-param>
        <param-name>contextConfigLocation(매개변수)</param-name>
        <param-value> ==>불러올 파일목록을 지정
           /WEB-INF/hello-servlet.xml
           /WEB-INF/world-servlet.xml
        </param-value>
     </init-param> 
     <load-on-startup>2</load-on-startup> =>메모리에 올리는순서
  </servlet>
  
  <servlet>
     <servlet-name>world</servlet-name>
     <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
     <load-on-startup>1</load-on-startup>
  </servlet>
  
  <!-- 요청명령어를 등록(*.do~) -->
  <servlet-mapping>
     <servlet-name>hello</servlet-name>
     <url-pattern>*.do</url-pattern>
  </servlet-mapping>

---------------------------------------------------
각각의 환경설정파일에서 설정

<!--3.요청에 따라서 처리해주는 컨트롤러 만들어서 처리(등록)  -->
<bean name="/world.do"  class="lee.WorldActionController" />
   
<bean name="/hello.do"  class="lee.HelloActionController" />
-----------------------------------------------------------
 WorldActionController
=======================
 public class WorldActionController implements Controller {
   //하나의 컨트롤러에 여러개의 요청명령어를 사용할 수가 있다.
	@Override
	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		System.out.println("WorldActionController의 handleRequest()호출됨!!");
		
		ModelAndView mav=new ModelAndView();
		mav.setViewName("list2");//
		mav.addObject("message2","클릭 둘!");
		return mav; 
	}
}
------------------------------------------------------
   index.html

  <body>
    <a href="hello.do">hello</a><br>
    <a href="world.do">world</a><br>
  </body>