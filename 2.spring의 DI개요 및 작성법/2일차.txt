2.Spring의 DI개요 및 작성법

 ->1.Maven 정리 및 활용
 ->사용자라이브러리->jar(다운로드)를 필요로할때 추가->사용->불편
                   ->버전관리에 불편(spring 3.2.3->4.2.5)

  ->개선->Maven의 특징->1.환경설정파일(pom.xml)
                        2.받고자하는 파일명,버전명을 적어주고 저장
                          ->자동으로 다운로드 받아서 관리

                   단점->가끔 오류가 발생->다운로드 멈춤
                       ->다시 다운로드 에러유발
      
****************************************************************
 해결책->C:\Users\kitcoop\.m2\repository=>하위폴더를 삭제시키고 
                                          다운로드 받는다.(pom.xml
                                           수정하고 저장시킨다.

      ->방어벽이 설정이 되어있는 경우->방어벽을 풀어준뒤 다운로드
*****************************************************************
<properties>
		<!-- Generic properties -->
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Spring -->
		<spring-framework.version>4.2.5.RELEASE</spring-framework.version>
</properties>
<dependencies>
		<!-- Spring and Transactions -->
		<dependency>
			<groupId>상위패키지명.하위패키지명..</groupId>
			<artifactId>다운로드 받는 파일명</artifactId>
			<version>${환경변수명}</version>

                        <version>4.2.5.RELEASE</version>

		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>

 ->2.DI(Dependency Injection)->의존성 주입(특정위치에 원하는 객체를
                                           넣어주는 것)

=================================================================
 *** Maven을 이용해서 다운로드 받는 방법 ***

 el,jstl

 1.google사이트에서 원하는 파일을 검색
   ex) spring maven jstl 찾는 경우
                    ===찾는 파일명
 2.
  <!-- 추가 -->
         <dependency>
           <groupId>javax.servlet</groupId>
           <artifactId>jstl</artifactId>
           <version>1.2</version>
         </dependency>

 3.불필요로하다고 생각되는 부분은 <dependency>~</dependency>를 삭제
   =>자동으로 파일이 삭제된다.
==================================================================

 p30 다운로드 받을때 관련된 파일의 연관표
   ex)spring-webmvc->spring-web이 연관되어있다.
   ---------------------------------------------
 p37 메이븐이 적용된 프로젝트->배포

         interface ==================>유연한 구조를 작성
      A             B
      
      MessageBeanDI        OutFile->out()->파일을 생성->내용
            |                  |
      MessageBeanImplDI    OutFileImpl
        sayHello()->콘솔에 저장된 값을 출력 out()

       ====================================================
       멤버변수로 상대방의 클래스 객체를 선언
       생성자 or 메서드에서 상대방의 객체를 생성=>메서드호출
       =====================================================

**********************************************************
  <constructor-arg>를 이용->Constructor Injection
                           객체를 생성할때 자동으로 호출되는
                          생성자를 이용해서 원하는 객체를 
                          불러오는 방법
**********************************************************
<bean id="mBean" class="spring2.MessageBeanImplDI">
   <constructor-arg index="0">
                    ===========>생성자의 매개변수 첫번째
      <value>대한민국</value> =><value>전달할값 </value>
   </constructor-arg>
   <constructor-arg index="1">
                    ===========>생성자의 매개변수 두번째
      <value>서울</value>
   </constructor-arg>
   
   <property name="greeting"> =><properyt name="멤버변수">
      <value>안녕,</value>    =>멤버변수의 이름을 보고 
                                Setter Method를 구분해서 호출
   </property>
</bean>

================================
MessageBeanImplDI 생성자 호출됨!
setGreeting() 호출됨!
message=>안녕,대한민국,서울!    
================================

 만들어진 객체를 필요로따라서 불러와서 사용이 가능

p133 *** 빈객체 범위 ***

 요청할때마다 객체를 생성해서 나한테 주는것가요?
 아니면 미리 객체를 생성->요청할때 주는것가요? 대여
======================================================
default->객체를 미리 한개를 만들어서 요청할때 빌려주는 개념
       ->메모리 관리 차원에서 (싱글톤)

bean=>spring2.MessageBeanImplDI@7f560810
bean2=>spring2.MessageBeanImplDI@7f560810
bean3=>spring2.MessageBeanImplDI@7f560810


<jsp:useBean id="mBean" class="spring2.MessageBeanImplDI"
     scope="page"/> ==>중소규모 사이트에서의 객체를 생성하는 구문

<bean id="mBean" class="spring2.MessageBeanImplDI" scope="prototype">
                                                   =================
setGreeting() 호출됨!
bean=>spring2.MessageBeanImplDI@3dd3bcd
bean2=>spring2.MessageBeanImplDI@97e1986
bean3=>spring2.MessageBeanImplDI@26f67b76

한개이상의 클래스에서의 연결상태(의존관계)->xml로 표현할것인가?
=======================>관계표시(has a 관계)

public class MessageBeanImplDI  implements MessageBeanDI{
  
	private String name1,name2;//생성자를 통해서 값을 저장
	private String greeting;//Setter Method를 통해서 값을 저장
	//--------------상대방의 클래스의 객체선언-----------------------------------
	private OutFile outF;//인터페이스형으로 객체를 받아올려고 한다.

	public void setOutF(OutFile outF) {
		this.outF = outF;
		System.out.println("setOutF()호출됨!"+outF);//주소값이 출력확인
	}
	//--------------------------------------------------


   xml환경설정-->has a 관계 설정방법
--------------------------------------------------------------
  ...
  <property name="outF">
        <ref bean="outFile" />
  </property>
***********************************************************
 형식1)
       <property name="멤버변수">
         <ref bean="상대방 빈즈의 id값" />
       </property>
 
 형식2)  
       <property name="멤버변수" ref="상대방 빈즈의 id값">
</bean>
=============================================================
<!-- OutFileImpl클래스의 setFilePath메서드 호출하면 매개변수 경로를 설정 -->
<bean id="outFile" class="spring2.OutFileImpl">
  <property name="filePath">
     <value>c:/webtest/good.txt</value>
  </property>
</bean>
-------------------------------------------------------------------
 최종결과

MessageBeanImplDI 생성자 호출됨!
setFilePath()호출됨!c:/webtest/good.txt
setGreeting() 호출됨!
setOutF()호출됨!spring2.OutFileImpl@13a57a3b
MessageBeanImplDI 생성자 호출됨!
setGreeting() 호출됨!
setOutF()호출됨!spring2.OutFileImpl@13a57a3b
MessageBeanImplDI 생성자 호출됨!
setGreeting() 호출됨!
setOutF()호출됨!spring2.OutFileImpl@13a57a3b
bean=>spring2.MessageBeanImplDI@59e84876
bean2=>spring2.MessageBeanImplDI@61a485d2
bean3=>spring2.MessageBeanImplDI@39fb3ab6
message=>안녕,한국,서울!


**스프링컨테이너-->xml파일->xml파일의 내용에 따라서 빈즈객체를 만들어서
                 저장하는 저장소

<bean  id="authFailLogger"


               ref="authFailLogger"
===========================================================
spring3
   SystemSender
   SystemMoniter
   Main.java->main()<-----app.xml


package spring3;

//문자를 전송 시스템
public class SmsSender {
      //SmsSender sms=new SmsSender();  sms.toString()
	public String toString() {
		return "SmsSender 호출";
	}
}
-------------------------------------------------------
            //1.xml파일이 한개이상이면 배열로 관리->불러오기
		String[] configLocation=new String[] {"app.xml"};//~,"abc.xml","ddd.xml"};
	    //2.xml파일을 읽어들여서 메모리에 로드->빈즈공장(=컨테이너)
		AbstractApplicationContext context=
				new ClassPathXmlApplicationContext(configLocation);
		
		//3.JVM(프로그램)이 종료될때 context객체도 같이 종료할 수 있도록 처리
		context.registerShutdownHook();
		
		//3.BeanFactory를 통해서 내가 원하는 객체를 꺼내올 수가 있다.
	    //<bean id="mBean" class="spring2.MessageBeanImplDI">
		SystemMoniter moniter=(SystemMoniter)context.getBean("moniter");//getBean("id값")
		System.out.println("moniter=>"+moniter);//moniter.toString()
		//4.프로그램이 종료
		context.close();//JVM이 종료시->컨테이너에 존재하는 모든빈(객체) 종료
=================================================================

최종결과

setPeriodTime()호출됨!!!
setSender()호출됨!!!SmsSender 호출
moniter=>SystemMoniter[periodTime=10,sender=SmsSender 호출]

최종 점검


<!-- SystemMoniter클래스의 setPeriodTime메서드를 호출하면서
        10(매개변수)을 전달 
         p:멤버변수명="저장할값" p:멤버변수-ref="참조할 상대방 빈즈의 id"
        -->
<bean id="moniter"  class="spring3.SystemMoniter"
           p:periodTime="20" p:sender-ref="smsSender">
     <!-- <property name="periodTime">
         <value>10</value>
     </property>
     <property name="sender">
        <ref bean="smsSender" />
     </property> -->
</bean>
setPeriodTime()호출됨!!!
setSender()호출됨!!!SmsSender 호출
moniter=>SystemMoniter[periodTime=20,sender=SmsSender 호출]


