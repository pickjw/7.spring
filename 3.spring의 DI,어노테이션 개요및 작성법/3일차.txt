3.spring의 DI,어노테이션 개요및 작성법

스프링->1.자바 App+xml파일 생성->객체 생성 관리부분(DI,어노테이션)
                   ================================
        2.웹 App=>JSP+DI,Annonation->Spring Web MVC(미니 프로젝트)
=================================================================
*******************************************************************
<!--spring4(생성자방법) 
  SystemMoniter클래스의 객체를 생성해서 호출되는 생성자의 매개변수중
  첫번째 매개변수는 10전달되고, 두번째는 생성된 SmsSender객체를 전달해준다. 
 -->
 
<bean id="moniter2"  class="spring4.SystemMoniter"
          c:periodTime="20" c:sender-ref="smsSender2">
   <!-- <constructor-arg value="10" /> 
   <constructor-arg ref="smsSender2" /> -->
   <!-- <constructor-arg>
       <ref bean="smsSender2" />
   </constructor-arg> -->
</bean>
<bean id="smsSender2"  class="spring4.SmsSender" />
***********************************************************

  Car tico=new Car()         |   new Car().startEnginee() //축약형
      ====>객체생성              =>객체생성
           객체이름이 존재       =>객체의 이름을 정확히 모름
      tico.startEnginee()
=============================================================
  spring5=>임의의 빈객체를 전달하는 방법=>축약(환경설정을 좀더
                                               단순하게 설정)

***************************************************************
//4.객체를 얻어오는 구문->2.5코딩방식->3.x버전이후의 코딩방식변경
		//SystemMoniter moniter3=(SystemMoniter)context.getBean("moniter3");//getBean("id값")
		//->3.x버전이후의 코딩방식->~getBean(1.빈식별자id,2.형변환할 클래스명.class)
		SystemMoniter moniter3=context.getBean("moniter3",SystemMoniter.class);
		System.out.println("moniter3=>"+moniter3);//moniter.toString()

***************************************************************
app.xml

  before

<!--spring5(축약형(임의의 객체))  -->
<bean id="moniter3"  class="spring5.SystemMoniter"
           p:periodTime="20" p:sender-ref="smsSender3" />

<bean id="smsSender3"  class="spring5.SmsSender" >
     <constructor-arg value="true" />
</bean>
=============================================================
  =>after

<!--spring5(축약형(임의의 객체)) 빈즈내부에 참조하고자하는 빈즈가
                                 포함이 되는 경우  -->
<bean id="moniter3"  class="spring5.SystemMoniter"
           p:periodTime="20">
    <property name="sender">
         <!-- <ref bean="smsSender3" />(1) -->
          <bean class="spring5.SmsSender">
                  <constructor-arg value="true" />
          </bean>
    </property>
</bean>

<!-- (2)
  <bean id="smsSender3"  class="spring5.SmsSender" >
     <constructor-arg value="true" />
</bean>
 -->
==============================================================
 spring6

<!--spring6
/list.do=action.ListAction
<bean name="/요청명령어" class="패키지명...처리클래스명"/>
<bean name="/list.do" class="action.ListAction"/>

 id와 동일한 기능을 속성명->name
 id->특정클래스의 객체를 가져오기위한 내부적인 구분번호,특수기호 사용불가
       /,# 특수기호 사용불가(지금은 가능 버전업때문에)
 name->/,특수기호를 사용이 가능하다.
 public void setNumber(List<Double> number) {
  -->

<bean name="performanceMoniter"  class="spring6.PerformanceMoniter">
   <property name="number">
    <list>
      <value>0.2</value>
      <value>0.3</value>
     </list>
   </property>
</bean>
---------------------------------------------------------------
Main

id값대신에 name값으로 사용이 가능 <list>태그 사용
--------------------------------------------------
PerformanceMoniter moniter=context.getBean("performanceMoniter",PerformanceMoniter.class);
		System.out.println("moniter=>"+moniter);//moniter.toString()
=================================================================
java.util=>ex) setTest(Map<String,SmsSender> test){
                       =======================
                  this.test=test;
               }

 pdf
<property~>
  <map>
   <entry>
   <key><value>frontDoor</value></key>
   <ref bean="참조할 상대방빈즈의 id">
   </entry>
  </map>
</property>
=============================================================
  **** <entry key="interval" value="1000"> ****
 =>
   <entry>
       <key>interval</key>
       <value>1000</value> ==><ref bean="상대방의 id값" />
   </entry>
==============================================================
 spring7

<!-- spring7(Set 자료형) -->
<bean name="customer"  class="spring7.Customer">
   <property name="subSet">
    <set>
      <value>1</value>
      <value>4</value>
     </set>
   </property>
</bean>

//4.객체를 얻어오는 구문->2.5코딩방식->3.x버전이후의 코딩방식
  Customer customer=context.getBean("customer",Customer.class);
  System.out.println("customer=>"+customer);//moniter.toString()

===============================================================
  어노테이션=>SpringTest3 with maven

  스프링 기초->1.DI, 2.Annotation =>Spring MVC패턴


어노테이션=>데코레이션(장식자) ->import { } from '@angular/core'

 형식)
@키워드        @Component->기능
-------------------------------------------------------------------------
->클래스와 연관->import를 어노테이션과 연관이 있는 클래스 불러온다.
--------------------------------------------------------------------------
***************************************************
->목적 1) 환경설정에 관한 어노테이션=>xml에서 사용(환경설정의 편리성)
       2) 자바코딩의 간결화(일정부분 자바코드의 실행부분을 대신 사용)
****************************************************
            ->객체생성->객체명.메서드명(~)


***장점***

1)시스템 복잡성이 아니라면 어노테이션 사용은 적합하게 쓰이면
   코드가 간결해지고 유지보수가 용이해짐(소스코드 양이 적을때)
   ===========================================================
2) 스프링처럼 복잡한 큰 규모의 프로젝트할때  xml파일의 사용이 필수

***단점***

 어노테이션과 관련된 클래스와 같이 연동->이해하기가 쉽지않다.

1.어노테이션 은 메타정보가 소스코드에 들어가므로 파악하기 어려움
   (재 컴파일이 필요하다.)

2. 소스코드가 같이 제공되지 않으면 사용에 제약이 따름
   (어노테이션 과 클래스 같이 사용할것)->이해
-------------------------------------------------------------------
어노테이션 정리->SpringMVC(환경설정 xml)->자유 게시판(흐름 이해)

SpringTest3(anno)
 **pom.xml에 기재(기본->스프링만 사용)**

<dependencies>
		<!-- Spring and Transactions -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>4.2.5.RELEASE</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>4.2.5.RELEASE</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>4.2.5.RELEASE</version>
		</dependency>
		
		<!--spring-jdbc  -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>4.2.5.RELEASE</version>
		</dependency>
		
		<!-- dbcp(ConnectionPool) -->
                <dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>
	</dependencies>	
==============================================================
    SpringTest3(anno)
          |
           -anno1


1.@Required->메서드명 위에 기술

=>이 메서드를 반드시 호출해야되는데 만약에 호출하지 않으면 에러를 유발시킨다.
=>멤버변수를 이용해서 에러유발

 어노테이션 ->1.클래스 명위에 @Controller 부착
              2.멤버변수명 위에 부착
              3.Setter Method외에 일반메서드도 가능 
                ->메서드명위에 어노테이션을 붙일 수가 있다.
-----------------------------------------------------------------
     @Override  =>1.상속을 받았을때 오버라이딩을 할때
                  오버라이딩한 메서드임을 알려주는 역할

                  2.오버라이딩을 제대로 했는지를 체크->문법에러발생
                    에러유발
===================================================================
       
       @Override
	public String toString() {
		// TODO Auto-generated method stub
		return super.toString();
	}  

===============================================================
1.@Required ->메서드위에
            ->이 멤버변수에 값을 저장시켜야 되는데 저장시키지 않고
              넘어가면 경고성 에러메세지를 내보내는 역할
            ->에러를 빨리 찾기위한 수단


**
app.xml에서 @Required를 사용하기위해서는 아래와 같은 빈즈클래스를 
미리 등록시켜줘야 한다.

<bean class="org.springframework.beans.factory.
                     annotation.RequiredAnnotationBeanPostProcessor">

</bean>


 
 







