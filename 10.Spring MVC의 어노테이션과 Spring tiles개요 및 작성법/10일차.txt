10.Spring MVC의 어노테이션과 Spring tiles개요 및 작성법

=>1.Spring MVC+어노테이션 부현->글목록보기,글쓰기까지
                              ========== ==========(글수정)
  2.Spring MVC+Maven 설정하는 방법 2가지
  3.Spring tiles=>스프링에서 메인페이지를 작성하는 방법
                  =====================================
  =>일정을 맞추는것
--------------------
 목요일 발표(4:30), 금요일 시험->4:30
======================================
글목록보기->글상세보기,글삭제하기,글검색하기 동일
글쓰기->글수정하기
------------------------------------------------
<!--3.글쓰기(글수정하기와 거의 유사) write.do -->
  1.board-servlet.xml에서 요청명령어 등록->편집

<!-- 
   before
<bean name="/write.do" class="lee.WriteActionController">
     <property name="dao">
         <ref bean="boardDAO" />
     </property>
     <property name="commandClass"  value="lee.BoardCommand" />
</bean> -->

<bean name="/write.do" class="lee.WriteActionController" />

============================================================
@Controller, @RequestMapping, 
========================================
@RequestParam("id") long eventId
-----------------------------------
형식)@RequestParam("전달 받은 매개변수명") 자료형 담을변수명

=>long eventId=request.getParameter("id");

  ${param.id}
===========================================================
@Controller
public class WriteActionController {
	
	@Autowired
	BoardDAO dao;//BoardDAO dao=new BoardDAO() (X)->write()

	public void setDao(BoardDAO dao) {
		this.dao = dao;
		System.out.println("setDao() 호출됨(dao)->"+dao);
	}

	@RequestMapping("/write.do")
    protected ModelAndView test(@RequestParam("title") String title,
    		@RequestParam("author") String author,
    		@RequestParam("content") String content)  throws Exception {
		
	// TODO Auto-generated method stub
		//request.setCharacterEncoding("utf-8");
		//BoardCommand data=(BoardCommand)command;
		/*
		String author=request.getParameter("author");
		String content=request.getParameter("content");
	    String title=request.getParameter("title");*/
	    //최대값을 구해서 num(5)+1->data.setNum(6)
	    int newNum=dao.getNewNum()+1;
	    BoardCommand data=new BoardCommand();
	    data.setNum(newNum);//계산해서 개발자가 입력을 해주는경우
	    data.setTitle(title);
	    data.setAuthor(author);
	    data.setContent(content);
	    //----------------------------------------------------
	    dao.write(data);
	    //-----------------------------------------------------------
	    ModelAndView mav=new ModelAndView("redirect:/list.do");
	    //mav.setViewName("list");
	return mav;
  }
}
==============================================================
@RequestParam("id") String id

 String id=request.getParameter("id");//"1"->1
 int id2=Integer.parseInt(id);//"1"->1
 
------------------------------------------------
 int id=Integer.parseInt(request.getParameter("id"));

 =>@RequestParam("id") int id =>받아서 형변환을 시켜서 받을 수있다
================================================================

Maven 기법->pom.xml파일을 이용해서 관련된 jar파일(라이브러리 파일,모듈)
                ->스프링(공통 클래스,인터페이스)->
                jar파일(자동으로 다운로드)->편리성 추가
                ->버전관리가 편리(장점)
                ->다운로드가 안되는 경우->1.방화벽 때문에->방화벽 해제->설정
                                          2.
                                          C:\Users\kitcoop\.m2\repository
                                                   계정이름   하위폴더를 삭제시킨뒤
                                          pom.xml에 설정->저장->자동 다운로드
          ==========================================================================

Maven=>lib폴더에 관련된 jar파일을 개별적으로 다운로드 받아서 
        복사=>스프링 4.x 변경->다시 다운받아서 복사=>Maven 방식
       =>버전관리가 어렵다.->불편(단점)
==================================================================
스프링 MVC에서 Maven을 설정하는 방법 2가지

1.** 처음부터 Maven Project를 설정하고 나서 작업(권장)=>프로젝트로 활용
   ->doc파일로 작성


   SpringWeb 프로젝트 이름으로 구성->Maven Project선택
   ================================
   =>maven을 적용시키는 항목->~webapp단어가 들어간 항목
                               ========================
                           프로젝트
Group Id:kr.spring.maven ->디렉토리 위치를 지정
Artifact Id:SpringMVC3->프로젝트명을 지정

package:kr.spring.maven.Springmvc3=>자동으로 등록->나중에
                                    필요로하는 경우 변경할것.
  ->pom.xml이 만들어지면서 등록

  1.src/main폴더에 java폴더 생성
  2.web.xml->기존의 web.xml로 편집

형식)

<!-- 웹상에서의 한글처리해주는 클래스를 등록(캐릭터셋 지정(utf-8)  -->
  <filter>
    <filter-name>필터클래스의 별칭</filter-name>
    <filter-class>상위패키지명...한글처리해주는 필터클래스명</filter-class>
      <init-param>
         <param-name>필터클래스가 전달받는 매개변수명</param-name>
         <param-value>한글캐릭터셋(UTF-8)</param-value>
      </init-param>
  </filter>
  
  <!-- 어떻게 요청을 할때 필터를 적용  SpringMVC3/board/list.do
                                       SpringMVC3/member/list.do
         -->                                     /밑에 어떻게 요청하든 상관X
  <filter-mapping>
         <filter-name>필터클래스의 별칭</filter-name>
         <url-pattern>어떻게 요청을 할지 요청할 경로를 지정(/*)</url-pattern>
  </filter-mapping>

<!-- 웹상에서의 한글처리해주는 클래스를 등록(캐릭터셋 지정(utf-8)  -->

  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
      <init-param>
         <param-name>encoding</param-name>
         <param-value>UTF-8</param-value>
      </init-param>
  </filter>
  
  <!-- 어떻게 요청을 할때 필터를 적용 -->
  <filter-mapping>
         <filter-name>encodingFilter</filter-name>
         <url-pattern>/*</url-pattern>
  </filter-mapping>
-----------------------------------------------------------------------------

next->Springmvc3

3.pom.xml에 설정먼저

spring-webmvc~.jar
spring-web~.jar

===============>*** 최소한의 스프링의 웹에 관련된 라이브러리 jar목록**

<dependencies>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>4.3.10.RELEASE</version>
    </dependency>
    
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>4.3.10.RELEASE</version>
    </dependency>
  </dependencies>

 =>요청을 받아서 처리해주는 구문만 작성하면 끝

** 4.dispatcher-servlet.xml에서 어떻게 요청명령어 등록**
5.처리해주는 컨트롤러 작성
6.요청을 받아서 화면에 출력시켜주는 jsp작성

  **http://hamait.tistory.com/322**

*** component-scan / annotation-config / annotation-driven 차이점
   ->각각 지원해주는 어노테이션이 차이가 있다. **

출처: http://hamait.tistory.com/322 [HAMA 블로그]

1)<context:component-scan base-package="최상위패키지.하위패키지..." />
                                             kr.spring.mbc

 @Component가 부여된 클래스를 찾아서 알아서 빈즈로 등록

kr.spring.mbc.Test 클래스 생성
kr.spring.mbc.Test2
kr.spring.mbc.Test3

@Component
public class Test{}

@Component
public class Test2{}

@Component
public class Test3{}

 자동으로 등록=>개발자가 작성할 필요가 없다
<bean id="test" class="kr.spring.mbc.Test"/>
<bean id="test" class="kr.spring.mbc.Test2"/>
<bean id="test" class="kr.spring.mbc.Test3"/>
****************************************************************

<!-- @Autowired을 자동으로 등록-->
<context:annotation-config />

RequiredAnnotationBeanPostProcessor : @Required 어노테이션 처리
- AutowiredAnnotationBeanPostProcessor : @Autowired 어노테이션 처리
   <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>		
- CommonAnnotationBeanPostProcessor : @Resource, @PostConstruct, @PreDestroy 어노테이션 처리
- ConfigurationClassPostProcessor : @Configuration 어노테이션 처리

<mvc:annotation-driven> =>name="/hello.do"부분을 따로 @RequestMapping으로
                          따로 사용할 수 있도록 해주는 어노테이션
----------------------------------------------------------------------------
=><bean name="/hello.do"  class="dr.mini.controller.TestController" />
  <bean   class="dr.mini.controller.TestController" />
=======================================================================

출처: http://hamait.tistory.com/322 [HAMA 블로그]

2)@Autowired->멤버변수위에
                         @Autowired->Setter Method를 호출하지 않아도 된다.
                         Car test;    //Car test=new Car();
                         메서드위에
                         @Autowired
                         public setTest(Car test){
                              this.test=test;
                          }
@Autowired
<property name="test" ref="">
</property>--->스프링이 인정-->setTest()를 호출

=====================>대신해줄 수있는 어노테이션(환경설정)
                                                        자바코드를 대신 실행

@Controller
public class TestController {
  
	@RequestMapping("/hello.do")
	public ModelAndView hello() {
		System.out.println("TestController 호출됨!");
		ModelAndView mav=new ModelAndView();
		mav.setViewName("hello");//  /hello.jsp
		mav.addObject("greeting",getGreeting());
		return mav;
	}
	//시간에 따라서 인사말을 변경시키고 싶다.
	private String getGreeting() {
		System.out.println("getGreeting()호출됨!");
		int hour=Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
		System.out.println("hour=>"+hour);
		if(hour >=6 && hour<=10) {
			return "좋은 아침입니다.";
		}else if(hour>=12 && hour <=15) {
			return "점심 식사는 하셨나요?";
		}else if(hour >=18 && hour <=22) {
			return "좋은 밤 되세요";
		}
		return "안녕하세요~~";
	}
}
-----------------------------------------------------------------
->index.jsp->hello.jsp

<!-- jstl과 Servlet관련된 라이브러리를 다운 -->
    <dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
	 </dependency>

----------------------------------------------------------------
2.Dynamic Web Project로 작성을 하고 나중에 Maven Project로 전환할 수 있다.
  ->디렉토리 구조는 변경X->Maven만 추가(pom.xml에 설정만 가능)->보충
   =================================================
   오click->configure메뉴->convert Maven Project선택
   ==================================================

  SpringWeb작성->디렉토리 구조부터 만들고 시작

 ->SpringAnno->Maven Project로 변경
===============================================

  spring maven 찾고자하는 패키지명

  ex) spring maven mysql

http://mvnrepository.com ->에 다운로드 받고자하는 jar파일이 없는 경우
----------------------------------------------------------------------
 따로 사이트를 찾거나 버전을 변경해서 다운로드를 받을 것.=>구글링

<!-- dependencies태그를 추가 다운로드
     (다른 Maven 사이트를 추가할때 필요로하는 태그 
*************************************************
형식)
*************************************************
-->
  <repositories>
     <repository>
       <id>oracle(프로그램명)</id>
       <name>ORACLE JDBC Repository<(설명문장)/name>
       <url>http://maven.jahia.org/maven2
           (접속해서 다운로드 받을 Maven Site)</url>
     </repository>
  </repositories>

=========================================================
<!-- dependencies태그를 추가 다운로드 -->
  <repositories>
     <repository>
       <id>oracle</id>
       <name>ORACLE JDBC Repository</name>
       <url>http://maven.jahia.org/maven2</url>
     </repository>
  </repositories>
==========================================================
=>SpringAnno->MyBatis+Annotation+Maven이 설정된 프로젝트
==========================================================
->압축해서 가져가면 안된다.~->SpringAnno.war
->import(원래의 Dynamic Project로 되돌아된다.)
================================================================

*****************************************************************
SpringTiles->프로젝트->스프링에서 메인페이지를 만들어주는 프레임워크(타일즈3)
                                   tiles을 환경설정
******************************************************************
-------------------------------------------------------------------------------
SpringTiles=>프로젝트 이름->Spring web Maven을 선택한 경우
---------------------------------------------------------------------
           =>SprintTiles+mybatis+Annotation+Maven+fileupload+fileDown

 pom.xml=>기존에 그대로 복사해서 사용
  tiles에 관련된 파일만 새로 추가하면 된다.

        <dependency>
  		<groupId>org.apache.tiles</groupId>
  		<artifactId>tiles-extras</artifactId>
  		<version>3.0.1</version>
  	</dependency>
  	<dependency>
  		<groupId>org.apache.tiles</groupId>
  		<artifactId>tiles-servlet</artifactId>
  		<version>3.0.1</version>
  	</dependency>
  	<dependency>
  		<groupId>org.apache.tiles</groupId>
  		<artifactId>tiles-jsp</artifactId>
  		<version>3.0.1</version>
  	</dependency>
----------------------------------------------------------------------
 1.pom.xml->자바의 경우->버전 1.6->1.8로 변경

<java.version>1.8</java.version>->1.6->1.8로 변경

2.프로젝트 오 click->Build Configurer-> 1.6버전을 지우고->Add library
                                                         JRE선택(1.8) 선택

3.Java Compiler 항목->1.6->1.8로 설정
4.Java Facets->Java ->1.8로 되어있는지를 확인
5.Runtimes ->Apache Tomcat v8.5 버전을 체크
------------------------------------------------------------------------------
   
 SpringTiles
       |
        -src=>컨트롤러 3개 작성
       |
         -WebContent
                  |
                   -WEB-INF
                         |
                          -lib
                         |
                          -tiles-def폴더(1.타일즈에 대한 환경설정)
                                 tilesdef.xml(화면에 어떻게 보일것인가에 대한 정보가
                                                   담겨져있는 파일정보)
                         |
                          -tiles-view(2.메인페이지에서 보여줄 폴더 생성)
                                  |
                                    -template->header.jsp(머리말)
                                                      menu.jsp(링크문자열)
                                                      **layout.jsp (작성)**
                                                      footer.jsp(꼬리말)
                              body-menu1.jsp(링크를  걸어서 최종적으로 화면에 보여줄)
                              body-menu2.jsp
                              body.jsp
-------------------------------------------------------------------------------------
web.xml

<filter>
        <filter-name>필터의 별칭이름</filter-name>
        <filter-class>
           org.springframework.web.filter.CharacterEncodingFilter
                                    패키지명...한글을 적용시킬 필터 클래스이름
        </filter-class>
        <init-param>
            <param-name>encoding(필터클래스에 전달할 매개변수명)</param-name>
            <param-value>UTF-8(한글 캐릭터셋)</param-value>
        </init-param>              euc-kr--->UTF-8로 설정
    </filter>
    
    <!-- 어떻게 요청시 한글이 지원이 되게 할것인가  -->
    <filter-mapping>
        <filter-name>encodingFilter(적용시킬 필터별칭 이름)</filter-name>
        <url-pattern>/*(한글이 적용이 되는 대상자폴더를 지정)</url-pattern>
    </filter-mapping>
----------------------------------------------------------------------------------
<filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>
           org.springframework.web.filter.CharacterEncodingFilter
        </filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    
    <!-- 어떻게 요청시 한글이 지원이 되게 할것인가  -->
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
======================================================================









